"""
Conformation Evolution Plotter

This script visualizes the temporal evolution of molecular conformations in simulation runs,
showing state changes before and during the main simulation time. Each conformation row can be 
labeled and annotated with its relative occurrence percentage, shown outside the plot area without visual artifacts.

INPUT FILES (required structure):

1. names.csv
    - Structure:
        old,new
        confA,Conformation A
        confB,Conformation B
        ...
    - Where:
        old: Original conformation name from raw data (must match those used in the G4.csv or H2O.csv).
        new: Name to use in the visualization (more readable or translated).

2. G4.csv (or H2O.csv, or the main trajectory file)
    - Structure:
        ORIGINAL,C1_CONF,C1_STA,C1_END,C2_CONF,C2_STA,C2_END,...
        confA,confB,1,200,confC,201,500,...
        ...
    - Where:
        ORIGINAL: Initial conformation for the trajectory.
        Cn_CONF: Conformation name in segment n (matches 'old' in names.csv).
        Cn_STA: Start frame (1-based) of segment n.
        Cn_END: End frame (inclusive) of segment n.

3. order.csv
    - Structure:
        position,contribution
        Conformation A,20.0%
        Conformation B,15.5%
        ...
    - Where:
        position: Conformation name (must match the 'new' names from names.csv).
        contribution: Percent occurrence for each conformation (with or without % symbol).

Dependencies:
    - pandas
    - matplotlib
    - numpy

Additional functionality:
    - Handles pre-simulation state changes (preframes).
    - Allows custom ticks at the start of the X axis, both position and label.
    - Trajectories without a segment are shown as grey dotted lines for clarity.
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from collections import defaultdict
import math
import os

def load_data(cwd, names_file, data_file, order_file):
    """Load all required CSV files and return as pandas DataFrames."""
    os.chdir(cwd)
    names_df = pd.read_csv(names_file)
    data_df = pd.read_csv(data_file)
    order_df = pd.read_csv(order_file)
    return names_df, data_df, order_df

def preprocess_data(names_df, data_df, order_df):
    """Map, clean, and prepare all relevant conformation names and dictionaries for plotting."""
    name_map = dict(zip(names_df['old'].str.strip(), names_df['new'].str.strip()))
    if 'ORIGINAL' in data_df.columns:
        data_df['ORIGINAL'] = data_df['ORIGINAL'].map(lambda x: name_map.get(str(x).strip(), x))
    conf_cols = [col for col in data_df.columns if col.endswith('_CONF')]
    for col in conf_cols:
        data_df[col] = data_df[col].map(lambda x: name_map.get(str(x).strip(), x) if pd.notna(x) else x)
    order_df['contribution'] = order_df['contribution'].str.strip().str.rstrip('%').astype(float)
    custom_order = order_df['position'].tolist()
    contrib_dict = dict(zip(order_df['position'], order_df['contribution']))
    conf_to_idx = {conf: i for i, conf in enumerate(custom_order)}
    return data_df, order_df, custom_order, contrib_dict, conf_to_idx

def build_trajectory_data(data_df, num_frames):
    """
    Convert the conformation segment structure to full per-frame lists.
    Returns a list of tuples: (initial_conformation, trajectory_list).
    """
    trajectory_data = []
    for idx, row in data_df.iterrows():
        trajectory = [None] * num_frames
        for i in range(1, 11):
            conf = row.get(f'C{i}_CONF')
            sta = row.get(f'C{i}_STA')
            end = row.get(f'C{i}_END')
            if pd.notna(conf) and pd.notna(sta) and pd.notna(end):
                start = int(sta) - 1
                stop = min(int(end), num_frames)
                for t in range(start, stop):
                    trajectory[t] = conf
        trajectory_data.append((row['ORIGINAL'], trajectory))
    return trajectory_data

def assign_preframe_changes(data_df, pre_frames, preframe_offset=5):
    """
    Assigns pre-simulation state changes across available preframes for trajectories
    whose initial conformation does not match their first segment conformation.

    Returns:
        pre_change_trajs: list of row indices with prestate changes.
        preframe_change_points: dict (trajectory_index: preframe_index_of_change)
    """
    pre_change_trajs = [
        i for i, row in data_df.iterrows()
        if row['ORIGINAL'] != row['C1_CONF']
    ]
    num_pre_change = len(pre_change_trajs)
    preframe_change_points = {}
    if num_pre_change > 0:
        available_preframes = list(range(-pre_frames + preframe_offset, 0))
        if num_pre_change > len(available_preframes):
            raise ValueError("More trajectories than available preframes to distribute without overlap.")
        indices = [
            math.ceil(i * (len(available_preframes) - 1) / (num_pre_change - 1)) if num_pre_change > 1 else 0
            for i in range(num_pre_change)
        ]
        for idx, traj_idx in enumerate(pre_change_trajs):
            change_frame = available_preframes[indices[idx]]
            preframe_change_points[traj_idx] = change_frame
    return pre_change_trajs, preframe_change_points

def frame_to_ns(frame_idx, md_time_ns, num_frames):
    """Convert a frame index to simulation time (ns)."""
    return frame_idx * (md_time_ns / num_frames)

def plot_conformation_evolution(
    data_df, trajectory_data, frame_conf_trajs, pre_change_trajs, preframe_change_points,
    custom_order, contrib_dict, conf_to_idx, pre_frames, num_frames, md_time_ns,
    custom_xtick_val, custom_xtick_label
):
    """
    Main plotting function: draws the evolution of conformations across time for all trajectories.
    Pre-simulation states are shown as negative ticks; custom_leftmost_tick allows arbitrary labeling.
    """
    fig, ax = plt.subplots(figsize=(14, 8))
    x_ns_vals = [frame for frame in range(-pre_frames + 1, 1)] + [frame_to_ns(f, md_time_ns, num_frames) for f in range(1, num_frames + 1)]

    for traj_idx, (orig, traj) in enumerate(trajectory_data):
        y_vals = []
        x_plot_vals = []
        # --- Preframes (before main simulation) ---
        if traj_idx in preframe_change_points:
            change_frame = preframe_change_points[traj_idx]
            # Preframes before change
            for frame in range(-pre_frames + 1, change_frame):
                y_vals.append(conf_to_idx.get(orig, np.nan))
                x_plot_vals.append(frame)
            # Double point at change: first old, then new
            y_vals.append(conf_to_idx.get(orig, np.nan))
            x_plot_vals.append(change_frame)
            y_vals.append(conf_to_idx.get(data_df.loc[traj_idx, 'C1_CONF'], np.nan))
            x_plot_vals.append(change_frame)
            # Remaining preframes (after change, before t=0)
            for frame in range(change_frame + 1, 1):
                y_vals.append(conf_to_idx.get(data_df.loc[traj_idx, 'C1_CONF'], np.nan))
                x_plot_vals.append(frame)
        else:
            for frame in range(-pre_frames + 1, 1):
                y_vals.append(conf_to_idx.get(orig, np.nan))
                x_plot_vals.append(frame)
        # --- Main simulation frames ---
        for frame in range(1, num_frames + 1):
            conf = traj[frame - 1]
            if conf is not None:
                idxs = frame_conf_trajs[frame - 1][conf]
                pos = idxs.index(traj_idx)
                n = len(idxs)
                jitter_v = 0.6 * (pos - (n - 1) / 2) / max(n, 1)
                y_val = conf_to_idx.get(conf, np.nan)
                if not np.isnan(y_val):
                    y_val += jitter_v
                    y_vals.append(y_val)
                else:
                    y_vals.append(np.nan)
            else:
                y_vals.append(np.nan)
            x_plot_vals.append(frame_to_ns(frame, md_time_ns, num_frames))
        ax.plot(x_plot_vals, y_vals, alpha=0.7, linewidth=1.5)
    
    # Draw grey dotted lines for initial conformers with no assigned trajectories
    present = set(orig for orig, _ in trajectory_data)
    for orig_conf in data_df['ORIGINAL'].unique():
        if orig_conf not in present:
            x_pre = [frame for frame in range(-pre_frames + 1, 1)]
            y_pre = [conf_to_idx.get(orig_conf, np.nan)] * len(x_pre)
            ax.plot(x_pre, y_pre, linestyle='dotted', color='grey', alpha=0.5)

    # Hide Y tick labels (use only annotations outside plot)
    ax.set_yticks(range(len(custom_order)))
    ax.set_yticklabels([""] * len(custom_order))
    ax.invert_yaxis()

    # X axis with custom tick at the left
    xticks = [custom_xtick_val, 0] + [
        frame_to_ns(int(round(ns_tick * num_frames / md_time_ns)), md_time_ns, num_frames)
        for ns_tick in [50, 100, 150, 200, 250, 300]
    ]
    xticklabels = [custom_xtick_label, '0'] + [str(int(t)) for t in [50, 100, 150, 200, 250, 300]]
    ax.set_xticks(xticks)
    ax.set_xticklabels(xticklabels, fontsize=18)
    ax.tick_params(axis='both', which='major', labelsize=18)

    # X axis labels for preframes and simulation time
    preframes_center = (min(x_ns_vals) + 0) / 2       # center of preframes
    simframes_center = (0 + md_time_ns) / 2           # center of simulation time
    ax.text(preframes_center, -0.11, "Equilibration", transform=ax.get_xaxis_transform(), ha='center', va='center', fontsize=20, fontweight='bold')
    ax.text(simframes_center, -0.11, "Simulation Time (ns)", transform=ax.get_xaxis_transform(), ha='center', va='center', fontsize=20, fontweight='bold')
    
    # Y axis labels for preframes and simulation time
    ax.set_ylabel('QCy(MeBT)â‚ƒ conformer', fontsize=20, fontweight='bold')

    plt.subplots_adjust(left=0.25, right=0.97, top=0.9, bottom=0.1)
    ax.yaxis.set_label_coords(-0.13, 0.5)

    # Add annotated percentage and name for each line of the plot, outside main area
    for i, conf in enumerate(custom_order):
        pct = contrib_dict.get(conf, 0)
        ax.text(-0.06, i, f"{pct:.2f}%", fontsize=14, va='center', ha='right', color='dimgray', transform=ax.get_yaxis_transform())
        ax.text(-0.055, i, conf, fontsize=14, va='center', ha='left', fontweight='bold', color='black', transform=ax.get_yaxis_transform())

    ax.set_xlim(min(x_ns_vals), md_time_ns + 0.5)
    ax.grid(True, axis='x', linestyle='--', alpha=0.5)
    plt.show()

if __name__ == "__main__":
    # --- Main configuration ---
    cwd = r"E:\Actuales\QCY_F1\adapted\H2O"
    names_file = 'names.csv'
    data_file = 'H2O.csv'
    order_file = 'order.csv'
    pre_frames = 50             # Number of preframes before t=0
    num_frames = 1500           # Total number of MD frames
    md_time_ns = 300            # MD total time (ns)
    preframe_offset = 5         # How many preframes to leave as initial state (before a conformational transition)

    # --- Data loading and preprocessing ---
    names_df, data_df, order_df = load_data(cwd, names_file, data_file, order_file)
    data_df, order_df, custom_order, contrib_dict, conf_to_idx = preprocess_data(names_df, data_df, order_df)
    trajectory_data = build_trajectory_data(data_df, num_frames)
    frame_conf_trajs = defaultdict(lambda: defaultdict(list))
    for traj_idx, (orig, traj) in enumerate(trajectory_data):
        for frame, conf in enumerate(traj):
            if conf is not None:
                frame_conf_trajs[frame][conf].append(traj_idx)
    pre_change_trajs, preframe_change_points = assign_preframe_changes(data_df, pre_frames, preframe_offset)

    # --- Custom tick for left-most X axis value ---
    custom_xtick_val = -49
    custom_xtick_label = "-4"

    plot_conformation_evolution(
        data_df, trajectory_data, frame_conf_trajs, pre_change_trajs, preframe_change_points,
        custom_order, contrib_dict, conf_to_idx, pre_frames, num_frames, md_time_ns,
        custom_xtick_val, custom_xtick_label
    )
